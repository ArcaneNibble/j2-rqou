library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

use work.memory_pack.all;

entity memory is port (
   clk  : in  std_logic;
   rst  : in  std_logic;
   wa   : in  integer range 0 to 31;
   ra0  : in  integer range 0 to 31;
   ra1  : in  integer range 0 to 31;
   wd   : in  std_logic_vector(31 downto 0);
   rd0  : out std_logic_vector(31 downto 0);
   rd1  : out std_logic_vector(31 downto 0);
   en   : in  std_logic);
end memory;

architecture beh of memory is

register variable this : ram_32x32_1w2r_t reset := RAM_32X32_1W2R_RESET;
signal rd : ram_32x32_d_vector_t(1 downto 0);

begin

   p0 : process(clk,this,wa,ra0,ra1,wd,rd,en)
   register this when clk = '1' and clk'event reset when rst  = '1';
   begin
      -- by default, don't write enable
      write_disable(this);
      -- write port.  Set up the write and assert write enable.  All bytes are written, is you want byte mask use write(this, wa, wd, bm)
      if en = '1' then write(this, wa, wd); end if;
      -- read port
      read(this, 0, ra0);
      read(this, 1, ra1);
   end process;

   -- 'register on the .w record gives you fastest timing, but one cycle write delay.  'combinatorial removes the pipeline register
   m0 : ram_32x32 port map( clk => clk, w => this'register.w, r => this'comb.r(0), d => rd(0));
   m1 : ram_32x32 port map( clk => clk, w => this'register.w, r => this'comb.r(1), d => rd(1));

   rd0 <= rd(0);
   rd1 <= rd(1);
end beh;
