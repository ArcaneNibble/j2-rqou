library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

use work.cpu2j0_pack.all;
use work.bus_mux_lock_pkg.all;

-- This entity connects two data bus masters (m1 and m2) with one data bus
-- slave. The two masters have a fixed priority. If both m1 and m2 raise their
-- EN lines in the same cycle, then M1 will always win and perform it's read or
-- write first while M2 must wait. If M1 continually has read or writes, then
-- M2 can be starve, so take care when choosing the bus master order

entity multi_master_bus_muxlock is port (
  rst : in std_logic;
  clk : in std_logic;
  m1_i : out cpu_data_i_t;
  m1_o : in cpu_data_o_t;
  m1_lock : in std_logic;
  m2_i : out cpu_data_i_t;
  m2_o : in cpu_data_o_t;
  m2_lock : in std_logic;
  slave_i : in cpu_data_i_t;
  slave_o : out cpu_data_o_t;
  slave_lock : out std_logic
  );
end multi_master_bus_muxlock;

architecture a of multi_master_bus_muxlock is
  type state_t is (M1, M2, M1LOCK1, M1LOCK2, M2LOCK1, M2LOCK2, M2POLL);
  type bus_mux_reg_t is record
    state : state_t;
    m1 : cpu_data_i_t;
    m2 : cpu_data_i_t;
    slave : cpu_data_o_t;
    slave_ack : std_logic;
  end record;
  constant BUS_MUX_RESET : bus_mux_reg_t :=
                             (state => M1,
                              m1 => ((others => '0'), '0'),
                              m2 => ((others => '0'), '0'),
                              slave => ('0', (others => '0'), '0', '0', "0000",
                                        (others => '0')),
                              slave_ack => '0');
  register variable this : bus_mux_reg_t reset := BUS_MUX_RESET;
begin
  p1 : process(this, m1_o, m1_lock, m2_o, m2_lock, slave_i)
    register this when clk='1' and clk'event reset when rst='1';
    variable slave_lockvar : std_logic;
  begin
    slave_lockvar := '0';
    case this.state is
    when M1 =>
      if (m1_o.en = '1' or m2_o.en = '0') then
        if(m1_o.en = '1') and (m1_o.wr = '0') and (m1_lock = '1') then
                                     slave_lockvar := '1';
          if(slave_i.ack = '1') then this.state := M1LOCK2;
          else                       this.state := M1LOCK1; end if;
        else                         this.state := M1; end if;
        this.m1.ack := slave_i.ack;
        this.m2.ack := '0';
        this.slave := m1_o;
      else
        if(m2_o.en = '1') and (m2_o.wr = '0') and (m2_lock = '1') then
                                     slave_lockvar := '1';
          if(slave_i.ack = '1') then this.state := M2LOCK2;
          else                       this.state := M2LOCK1; end if;
        else                         this.state := M2; end if;
        this.m1.ack := '0';
        this.m2.ack := slave_i.ack;
        this.slave := m2_o;
      end if;
    when M1LOCK1 =>
        if(slave_i.ack = '1') then   this.state := M1LOCK2;
        else                         this.state := M1LOCK1; end if;
        this.m1.ack := slave_i.ack;
        this.m2.ack := '0';
        this.slave := m1_o;
                                     slave_lockvar := '1';
    when M1LOCK2 =>
        if(m1_o.en = '1') then
          if(m1_o.wr = '0') and (m1_lock = '1') then
                                     slave_lockvar := '1';
            if(slave_i.ack = '1') then
                                     this.state := M1LOCK2;
            else                     this.state := M1LOCK1; end if;
          else                       this.state := M1; end if;
        elsif(m1_lock = '0') then    this.state := M2POLL;
        else                         slave_lockvar := '1';
                                     this.state := M1LOCK2; end if;
        this.m1.ack := slave_i.ack;
        this.m2.ack := '0';
        this.slave := m1_o;
    when M2 =>
      if (m1_o.en = '1' or m2_o.en = '0') and
        (this.slave_ack = '1') then
        if(m1_o.en = '1') and (m1_o.wr = '0') and (m1_lock = '1') then
                                     slave_lockvar := '1';
          if(slave_i.ack = '1') then this.state := M1LOCK2;
          else                       this.state := M1LOCK1; end if;
        else                         this.state := M1; end if;
        this.m1.ack := slave_i.ack;
        this.m2.ack := '0';
        this.slave := m1_o;
      else
        if(m2_o.en = '1') and (m2_o.wr = '0') and (m2_lock = '1') then
                                     slave_lockvar := '1';
          if(slave_i.ack = '1') then this.state := M2LOCK2;
          else                       this.state := M2LOCK1; end if;
        else                         this.state := M2; end if;
        this.m1.ack := '0';
        this.m2.ack := slave_i.ack;
        this.slave := m2_o;
      end if;
    when M2LOCK1 =>
        if(slave_i.ack = '1') then   this.state := M2LOCK2;
        else                         this.state := M2LOCK1; end if;
        this.m1.ack := '0';
        this.m2.ack := slave_i.ack;
        this.slave := m2_o;
                                     slave_lockvar := '1';
    when M2LOCK2 =>
        if(m2_o.en = '1') then
          if(m2_o.wr = '0') and (m2_lock = '1') then
                                     slave_lockvar := '1';
            if(slave_i.ack = '1') then
                                     this.state := M2LOCK2;
            else                     this.state := M2LOCK1; end if;
          else                       this.state := M2; end if;
          this.m1.ack := '0';
          this.m2.ack := slave_i.ack;
          this.slave := m2_o;
        elsif(m2_lock = '0') then
          if(m1_o.en = '1') and (m1_o.wr = '0') and (m1_lock = '1') then
                                     slave_lockvar := '1';
            if(slave_i.ack = '1') then
                                     this.state := M1LOCK2;
            else                     this.state := M1LOCK1; end if;
          else                       this.state := M1; end if;
          this.m1.ack := slave_i.ack;
          this.m2.ack := '0';
          this.slave := m1_o;
        else                         slave_lockvar := '1';
                                     this.state := M2LOCK2;
          this.m1.ack := '0';
          this.m2.ack := slave_i.ack;
          this.slave := m2_o; end if;
    when others => -- M2POLL
      if (m2_o.en = '0') then
        if(m1_o.en = '1') and (m1_o.wr = '0') and (m1_lock = '1') then
                                     slave_lockvar := '1';
          if(slave_i.ack = '1') then this.state := M1LOCK2;
          else                       this.state := M1LOCK1; end if;
        else                         this.state := M1; end if;
        this.m1.ack := slave_i.ack;
        this.m2.ack := '0';
        this.slave := m1_o;
      else -- that is (m2_o.en = '1')
        if(m2_o.wr = '0') and (m2_lock = '1') then
                                     slave_lockvar := '1';
          if(slave_i.ack = '1') then this.state := M2LOCK2;
          else                       this.state := M2LOCK1; end if;
        else                         this.state := M2; end if;
        this.m1.ack := '0';
        this.m2.ack := slave_i.ack;
        this.slave := m2_o;
      end if;
    end case;
   
    this.slave_ack := slave_i.ack;
    this.m1.d := slave_i.d;
    this.m2.d := slave_i.d;
    slave_lock <= slave_lockvar;
  end process;

  m1_i <= this'combinatorial.m1;
  m2_i <= this'combinatorial.m2;
  slave_o <= this'combinatorial.slave;
end a;
